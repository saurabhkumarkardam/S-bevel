##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-certs-cleanup
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "fabric-catools.name" . }}-cleanup
    app.kubernetes.io/component: ca-tools
    app.kubernetes.io/part-of: {{ include "fabric-catools.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
  annotations:
    helm.sh/hook-weight: "0"
    helm.sh/hook: "pre-delete"
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "fabric-catools.name" . }}-cleanup
        app.kubernetes.io/component: ca-tools
        app.kubernetes.io/part-of: {{ include "fabric-catools.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}      
      restartPolicy: "Never"
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
        - name: delete-secrets
          image: {{ .Values.image.alpineUtils }}
          securityContext:
            runAsUser: 0
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - |

{{- if .Values.settings.removeCertsOnDelete }}
              function deleteSecret {
                key=$1
                kubectl get secret ${key} --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
                if [ $? -eq 0 ]; then
                  kubectl delete secret ${key} --namespace {{ .Release.Namespace }}
                fi
              }

              deleteSecret admin-tls
              deleteSecret admin-msp
              deleteSecret {{ .Release.Name }}-msp 
              deleteSecret {{ .Release.Name }}-tls
              {{- range .Values.users.usersList }}
                deleteSecret {{ .identity }}-msp
                deleteSecret {{ .identity }}-tls
              {{ end }}
{{- end}}
{{- if .Values.settings.removeOrdererTlsOnDelete }}
              if kubectl get configmap --namespace {{ .Release.Namespace }} orderer-tls-cacert &> /dev/null; then
                echo "Deleting orderer-tls-cacert configmap in k8s ..."
                kubectl delete configmap --namespace {{ .Release.Namespace }} orderer-tls-cacert
              fi
{{- end}}
