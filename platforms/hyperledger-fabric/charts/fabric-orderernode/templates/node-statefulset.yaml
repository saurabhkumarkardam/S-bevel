##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "fabric-orderernode.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: fabric
    app.kubernetes.io/part-of: {{ include "fabric-orderernode.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
    {{- include "labels.deployment" . | nindent 4 }}
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: "{{ .Release.Name }}"
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/component: fabric
      app.kubernetes.io/part-of: {{ include "fabric-orderernode.fullname" . }}
      app.kubernetes.io/namespace: {{ .Release.Namespace }}
      app.kubernetes.io/release: {{ .Release.Name }}
      app.kubernetes.io/managed-by: helm
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/component: fabric
        app.kubernetes.io/part-of: {{ include "fabric-orderernode.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
        {{- include "labels.deployment" . | nindent 8 }}
    spec:    
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      volumes:
      - name: certificates
        emptyDir:
          medium: Memory
      {{ if .Values.global.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ .Values.global.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt  # curl expects certs to be in /etc/ssl/certs/ca-certificates.crt
      {{ end  }}
      {{- if ne ($.Values.global.version | trunc 3) "2.5" }}
      - name: {{ .Release.Name }}-genesis-volume
        configMap:
          name: syschannel-genesis
          items:
            - key: syschannel-genesis_base64
              path: genesis.block.base64
      {{ end  }}
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
      initContainers:
      - name: kafka-healthcheck
        image: {{ .Values.image.healthCheck }}
        imagePullPolicy: IfNotPresent
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          if [ {{ .Values.orderer.consensus }} == kafka ]
          then
            COUNTER=1
            FLAG=true
            KAFKACOUNT=0
            COUNT=0
            {{ range .Values.kafka.brokers}}
            COUNT=`expr "$COUNT" + 1`
            {{ end }}
            while [ "$COUNTER" -le {{ .Values.kafka.readinessThresHold }} ]
            do
              {{ range .Values.kafka.brokers}}
              KAFKA_BROKERS={{ .  }}
              STATUS=$(nc -vz $KAFKA_BROKERS 2>&1 | grep -c open )
              if [ "$STATUS" == 0 ]
              then
                FLAG=false
              else
                FLAG=true
                KAFKACOUNT=`expr "$KAFKACOUNT" + 1`
                echo "$KAFKACOUNT kafka brokers out of $COUNT are up and running"
              fi
              {{ end }}
              if [ "$FLAG" == false ]
              then
                echo "$KAFKACOUNT kafka brokers out of $COUNT are up and running!"
                echo "Retry attempted $COUNTER times, retrying after {{ .Values.kafka.readinessCheckInterval }} seconds"
                COUNTER=`expr "$COUNTER" + 1`
                sleep {{ .Values.kafka.readinessCheckInterval }}
              else
                echo "SUCCESS!"
                echo "All $KAFKACOUNT kafka broker are up and running!"
                exit 0
                break
              fi
            done
            if [ "$COUNTER" -gt {{ .Values.kafka.readinessThresHold }} ] || [ "$FLAG" == false ]
            then
              echo "Retry attempted $COUNTER times, no kafka brokers are up and running. Giving up!"
              exit 1
              break
            fi
          fi
      - name: certificates-init
        image: {{ .Values.image.alpineUtils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ .Values.global.vault.address }}
        - name: VAULT_SECRET_ENGINE
          value: "{{ .Values.global.vault.secretEngine }}"
        - name: VAULT_SECRET_PREFIX
          value: "{{ .Values.global.vault.secretPrefix }}"
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.global.vault.authPath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.global.vault.role }}
        - name: MOUNT_PATH
          value: /secret
        - name: VAULT_TYPE
          value: "{{ .Values.global.vault.type }}"
        - name: ORDERER_NAME
          value: {{ .Release.Name }}
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh

{{- if eq .Values.global.vault.type "hashicorp" }}
          . /scripts/bevel-vault.sh

          # Calling a function to retrieve the vault token.
          vaultBevelFunc "init"

          function getOrdererTlsSecret {
            KEY=$1
       
            echo "Getting TLS certificates from Vault."
            vaultBevelFunc "readJson" "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/orderers/${KEY}"
            if [ "$SECRETS_AVAILABLE" == "yes" ]
            then
              TLS_CA_CERT=$(echo ${VAULT_SECRET} | jq -r '.["ca_crt"]')
              TLS_SERVER_CERT=$(echo ${VAULT_SECRET} | jq -r '.["server_crt"]')
              TLS_SERVER_KEY=$(echo ${VAULT_SECRET} | jq -r '.["server_key"]')
              
              echo "${TLS_CA_CERT}" > ${OUTPUT_PATH}/ca.crt
              echo "${TLS_SERVER_CERT}" > ${OUTPUT_PATH}/server.crt
              echo "${TLS_SERVER_KEY}" > ${OUTPUT_PATH}/server.key
              ORDERER_TLS_SECRET=true
            else
              ORDERER_TLS_SECRET=false
            fi
          }

          function getOrdererMspSecret {
            KEY=$1

            echo "Getting MSP certificates from Vault."
            vaultBevelFunc "readJson" "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/orderers/${KEY}"
            if [ "$SECRETS_AVAILABLE" == "yes" ]
            then
              ADMINCERT=$(echo ${VAULT_SECRET} | jq -r '.["admincerts"]')
              CACERTS=$(echo ${VAULT_SECRET} | jq -r '.["cacerts"]')
              KEYSTORE=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
              SIGNCERTS=$(echo ${VAULT_SECRET} | jq -r '.["signcerts"]')
              TLSCACERTS=$(echo ${VAULT_SECRET} | jq -r '.["tlscacerts"]')

              echo "${ADMINCERT}" > ${OUTPUT_PATH}/admincerts/admin.crt
              echo "${CACERTS}" > ${OUTPUT_PATH}/cacerts/ca.crt
              echo "${KEYSTORE}" > ${OUTPUT_PATH}/keystore/server.key
              echo "${SIGNCERTS}" > ${OUTPUT_PATH}/signcerts/server.crt
              echo "${TLSCACERTS}" > ${OUTPUT_PATH}/tlscacerts/tlsca.crt
              ORDERER_MSP_SECRET=true
            else
              ORDERER_MSP_SECRET=false
            fi  
          }

{{- else }}
          function getOrdererTlsSecret {
            KEY=$1
            KUBENETES_SECRET=$(kubectl get secret ${KEY} --namespace {{ .Release.Namespace }} -o json)
            if  [ "$KUBENETES_SECRET" = "" ]; then
              ORDERER_TLS_SECRET=false
            else
              TLS_CA_CERT=$(echo ${KUBENETES_SECRET} | jq -r '.data.cacrt'  | base64 -d)
              TLS_SERVER_CERT=$(echo ${KUBENETES_SECRET} | jq -r '.data.servercrt'  | base64 -d)
              TLS_SERVER_KEY=$(echo ${KUBENETES_SECRET} | jq -r '.data.serverkey'  | base64 -d)
              
              echo "${TLS_CA_CERT}" > ${OUTPUT_PATH}/ca.crt
              echo "${TLS_SERVER_CERT}" > ${OUTPUT_PATH}/server.crt
              echo "${TLS_SERVER_KEY}" > ${OUTPUT_PATH}/server.key
              ORDERER_TLS_SECRET=true
            fi
          }

          function getOrdererMspSecret {
            KEY=$1                       
            KUBENETES_SECRET=$(kubectl get secret ${KEY} --namespace {{ .Release.Namespace }} -o json)
            if  [ "$KUBENETES_SECRET" = "" ]; then
              ORDERER_MSP_SECRET=false
            else
              ADMINCERT=$(echo ${KUBENETES_SECRET} | jq -r '.data.admincerts'  | base64 -d)
              CACERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.cacerts'  | base64 -d)
              KEYSTORE=$(echo ${KUBENETES_SECRET} | jq -r '.data.keystore'  | base64 -d)
              SIGNCERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.signcerts'  | base64 -d)
              TLSCACERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.tlscacerts'  | base64 -d)

              echo "${ADMINCERT}" > ${OUTPUT_PATH}/admincerts/admin.crt
              echo "${CACERTS}" > ${OUTPUT_PATH}/cacerts/ca.crt
              echo "${KEYSTORE}" > ${OUTPUT_PATH}/keystore/server.key
              echo "${SIGNCERTS}" > ${OUTPUT_PATH}/signcerts/server.crt
              echo "${TLSCACERTS}" > ${OUTPUT_PATH}/tlscacerts/tlsca.crt
              ORDERER_MSP_SECRET=true
            fi                 
          }

{{- end }} 
          COUNTER=1
          while [ "$COUNTER" -le {{ .Values.healthCheck.retries }} ]
          do
            OUTPUT_PATH="${MOUNT_PATH}/tls"
            mkdir -p ${OUTPUT_PATH}
            getOrdererTlsSecret ${ORDERER_NAME}-tls

            OUTPUT_PATH="${MOUNT_PATH}/msp"
            mkdir -p ${OUTPUT_PATH}/admincerts
            mkdir -p ${OUTPUT_PATH}/cacerts
            mkdir -p ${OUTPUT_PATH}/keystore
            mkdir -p ${OUTPUT_PATH}/signcerts
            mkdir -p ${OUTPUT_PATH}/tlscacerts
            getOrdererMspSecret ${ORDERER_NAME}-msp

            if [ "$ORDERER_TLS_SECRET" = "true" ] && [ "$ORDERER_MSP_SECRET" = "true" ]
            then
              echo "Orderer certificates have been obtained correctly"
              break
            else
              echo "Orderer certificates have not been obtained, sleeping for {{ .Values.healthCheck.sleepTimeAfterError }}"
              sleep {{ .Values.healthCheck.sleepTimeAfterError }}
              COUNTER=`expr "$COUNTER" + 1`
            fi
          done

          if [ "$COUNTER" -gt {{ .Values.healthCheck.retries }} ]
          then
            echo "Retry attempted `expr $COUNTER - 1` times, Orderer certificates have not been obtained."
            exit 1
          fi   
        volumeMounts:
        - name: certificates
          mountPath: /secret
        {{ if .Values.global.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      containers:
      - name: fabric-orderer
        image: {{ .Values.image.orderer }}:{{ .Values.global.version }}
        imagePullPolicy: IfNotPresent 
        workingDir: /opt/gopath/src/github.com/hyperledger/fabric
        command: ["sh", "-c", "cat /var/hyperledger/orderer/genesis/genesis.block.base64 | base64 -d > /var/hyperledger/orderer/orderer.genesis.block && orderer"]
        ports:
        - containerPort: 7050
        - name: operations
          containerPort: 9443
        - name: onsadmin
          containerPort: 7055
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-config
        volumeMounts:
        - name: datadir
          mountPath: /var/hyperledger/production/orderer
        {{- if ne ($.Values.global.version | trunc 3) "2.5" }}
        - name: {{ .Release.Name }}-genesis-volume
          mountPath: /var/hyperledger/orderer/genesis
          readOnly: true
        {{- end }}
        - name: certificates
          mountPath: /var/hyperledger/orderer/crypto
          readOnly: true
        resources:
          requests:
            memory: {{ .Values.orderer.resources.requests.memory }}
            cpu: {{ .Values.orderer.resources.requests.cpu }}
          limits:
            memory: {{ .Values.orderer.resources.limits.memory }}
            cpu: {{ .Values.orderer.resources.limits.cpu }}
      - name: grpc-web
        image: "ghcr.io/hyperledger-labs/grpc-web:latest"
        imagePullPolicy: IfNotPresent        
        ports:
        - name: grpc-web
          containerPort: 7443        
        env:
        - name: BACKEND_ADDRESS
          value: "{{ .Release.Name }}.{{ .Release.Namespace }}:{{ .Values.orderer.ports.grpc.clusterIpPort }}"
        - name: SERVER_TLS_CERT_FILE
          value: "/certs/tls/server.crt"
        - name: SERVER_TLS_KEY_FILE
          value: "/certs/tls/server.key"
        - name: BACKEND_TLS_CA_FILES
          value: "/certs/tls/ca.crt"
        - name: SERVER_BIND_ADDRESS
          value: "0.0.0.0"
        - name: SERVER_HTTP_DEBUG_PORT
          value: "8080"
        - name: SERVER_HTTP_TLS_PORT
          value: "7443"
        - name: BACKEND_TLS
          value: "true"
        - name: SERVER_HTTP_MAX_WRITE_TIMEOUT
          value: 5m
        - name: SERVER_HTTP_MAX_READ_TIMEOUT
          value: 5m
        - name: USE_WEBSOCKETS
          value: "true"
        volumeMounts:        
        - name: certificates
          mountPath: /certs
  volumeClaimTemplates:
  #Lables are not being taken by Kubernetes as it dynamically creates PVC
  - metadata:
      name: datadir
      labels:
        {{- include "labels.pvc" . | nindent 8 }}    
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: storage-{{ .Release.Name }}
      resources:
        requests:
          storage: {{ .Values.storage.size }}
