##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: channel-create-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name:  osn-createchannel-{{ .Release.Name }}
    app.kubernetes.io/component: fabric-osnadmin-channel-create-job
    app.kubernetes.io/part-of: {{ include "fabric-osnadmin-channel-create.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app.kubernetes.io/name:  osn-createchannel-{{ .Release.Name }}
        app.kubernetes.io/component: fabric-osnadmin-channel-create-job
        app.kubernetes.io/part-of: {{ include "fabric-osnadmin-channel-create.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
    spec:
      restartPolicy: "OnFailure"
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      volumes:
      {{ if .Values.global.vault.tls }}
      - name: vaultca
        secret:
          secretName: {{ .Values.global.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{ end  }}
      {{- if not $.Values.orderer.addOrderer }}
      - name: genesis
        configMap:
          name: {{ .Release.Name }}-genesis
          items:
            - key: {{ .Release.Name }}-genesis_base64
              path: genesis.block.base64
      {{ end  }}
      - name: certificates
        emptyDir:
          medium: Memory
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
      initContainers:
      - name: certificates-init
        image: {{ $.Values.image.alpineUtils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ $.Values.global.vault.address }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.global.vault.role }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.global.vault.authPath }}
        - name: VAULT_SECRET_ENGINE
          value: "{{ .Values.global.vault.secretEngine }}"
        - name: VAULT_SECRET_PREFIX
          value: "{{ .Values.global.vault.secretPrefix }}"
        - name: VAULT_TYPE
          value: "{{ $.Values.global.vault.type }}"
        - name: MOUNT_PATH
          value: /secret
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh

{{- if eq .Values.global.vault.type "hashicorp" }}

          source /scripts/bevel-vault.sh
          vaultBevelFunc "init"

          function getOrdererTlsSecret {
            KEY=$1
       
            echo "Getting TLS certificates from Vault."
            vaultBevelFunc "readJson" "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/orderers/${KEY}"

            TLS_CA_CERT=$(echo ${VAULT_SECRET} | jq -r '.["ca_crt"]')
            TLS_SERVER_CERT=$(echo ${VAULT_SECRET} | jq -r '.["server_crt"]')
            TLS_SERVER_KEY=$(echo ${VAULT_SECRET} | jq -r '.["server_key"]')
            
            echo "${TLS_CA_CERT}" > ${OUTPUT_PATH}/ca.crt
            echo "${TLS_SERVER_CERT}" > ${OUTPUT_PATH}/server.crt
            echo "${TLS_SERVER_KEY}" > ${OUTPUT_PATH}/server.key
          }

          function getOrdererMspSecret {
            type=$1
            KEY=$2
            echo "Getting MSP certificates from Vault."
            vaultBevelFunc "readJson" "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/${type}/${KEY}"

            ADMINCERT=$(echo ${VAULT_SECRET} | jq -r '.["admincerts"]')
            CACERTS=$(echo ${VAULT_SECRET} | jq -r '.["cacerts"]')
            KEYSTORE=$(echo ${VAULT_SECRET} | jq -r '.["keystore"]')
            SIGNCERTS=$(echo ${VAULT_SECRET} | jq -r '.["signcerts"]')
            TLSCACERTS=$(echo ${VAULT_SECRET} | jq -r '.["tlscacerts"]')

            echo "${ADMINCERT}" > ${OUTPUT_PATH}/admincerts/admin.crt
            echo "${CACERTS}" > ${OUTPUT_PATH}/cacerts/ca.crt
            echo "${KEYSTORE}" > ${OUTPUT_PATH}/keystore/server.key
            echo "${SIGNCERTS}" > ${OUTPUT_PATH}/signcerts/server.crt
            echo "${TLSCACERTS}" > ${OUTPUT_PATH}/tlscacerts/tlsca.crt
          }
{{- else }}

          function getOrdererTlsSecret {
            KEY=$1
            KUBENETES_SECRET=$(kubectl get secret ${KEY} --namespace {{ .Release.Namespace }} -o json)
            CACERT=$(echo ${KUBENETES_SECRET} | jq -r '.data.cacrt'  | base64 -d)
            CLIENTSEVER=$(echo ${KUBENETES_SECRET} | jq -r '.data.servercrt'  | base64 -d)
            CLIENTKEY=$(echo ${KUBENETES_SECRET} | jq -r '.data.serverkey'  | base64 -d)
            
            echo "${CACERT}" > ${OUTPUT_PATH}/ca.crt
            echo "${CLIENTSEVER}" > ${OUTPUT_PATH}/server.crt
            echo "${CLIENTKEY}" > ${OUTPUT_PATH}/server.key
          }

          function getOrdererMspSecret {
            type=$1
            KEY=$2
            KUBENETES_SECRET=$(kubectl get secret ${KEY} --namespace {{ .Release.Namespace }} -o json)

            ADMINCERT=$(echo ${KUBENETES_SECRET} | jq -r '.data.admincerts'  | base64 -d)
            CACERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.cacerts'  | base64 -d)
            KEYSTORE=$(echo ${KUBENETES_SECRET} | jq -r '.data.keystore'  | base64 -d)
            SIGNCERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.signcerts'  | base64 -d)
            TLSCACERTS=$(echo ${KUBENETES_SECRET} | jq -r '.data.tlscacerts'  | base64 -d)

            echo "${ADMINCERT}" > ${OUTPUT_PATH}/admincerts/admin.crt
            echo "${CACERTS}" > ${OUTPUT_PATH}/cacerts/ca.crt
            echo "${KEYSTORE}" > ${OUTPUT_PATH}/keystore/server.key
            echo "${SIGNCERTS}" > ${OUTPUT_PATH}/signcerts/server.crt
            echo "${TLSCACERTS}" > ${OUTPUT_PATH}/tlscacerts/tlsca.crt
      
          }
{{- end }}

          OUTPUT_PATH="${MOUNT_PATH}/admin/msp"
          mkdir -p ${OUTPUT_PATH}/admincerts
          mkdir -p ${OUTPUT_PATH}/cacerts
          mkdir -p ${OUTPUT_PATH}/keystore
          mkdir -p ${OUTPUT_PATH}/signcerts
          mkdir -p ${OUTPUT_PATH}/tlscacerts
          getOrdererMspSecret users admin-msp

      {{- range $orderer := .Values.orderers }}
            ORDERER_NAME={{ .name }}
            OUTPUT_PATH="${MOUNT_PATH}/${ORDERER_NAME}/msp"
            mkdir -p ${OUTPUT_PATH}/admincerts
            mkdir -p ${OUTPUT_PATH}/cacerts
            mkdir -p ${OUTPUT_PATH}/keystore
            mkdir -p ${OUTPUT_PATH}/signcerts
            mkdir -p ${OUTPUT_PATH}/tlscacerts
            getOrdererMspSecret orderers ${ORDERER_NAME}-msp

            OUTPUT_PATH="${MOUNT_PATH}/${ORDERER_NAME}/tls"
            mkdir -p ${OUTPUT_PATH}
            getOrdererTlsSecret ${ORDERER_NAME}-tls
      {{- end }}

        volumeMounts:
        {{ if .Values.global.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: certificates
          mountPath: /secret
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
      containers:
      - name: createchannel
        image: {{ .Values.image.fabricTools }}:{{ .Values.global.version }} 
        imagePullPolicy: IfNotPresent
        stdin: true
        tty: true
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-osnadmin-config
        env:
        - name: ADD_ORDERER
          value: "{{ .Values.orderer.addOrderer }}"
        command: ["sh", "-c"]
        args:
        - |-

          #!/usr/bin/env sh
          echo "Format or fetch genesis file..."
          if [ $ADD_ORDERER = false ]
          then
            cat ./genesis/genesis.block.base64 | base64 -d > orderer.genesis.block
          else 
            peer channel fetch config ${CHANNEL_NAME}_config_block.pb -o ${CORE_PEER_ADDRESS} -c ${CHANNEL_NAME} --tls --cafile ${ORDERER_CA}
          fi 

          {{- range $orderer := .Values.orderers }}
            ORDERER_NAME={{ .name }}
            ADMIN_TLS_PRIVATE_KEY="${ADMIN_TLS_CERTS}/${ORDERER_NAME}/tls/server.key"
            ADMIN_TLS_SIGN_CERT="${ADMIN_TLS_CERTS}/${ORDERER_NAME}/tls/server.crt"
            OSN_TLS_CA_ROOT_CERT="${ADMIN_TLS_CERTS}/${ORDERER_NAME}/tls/ca.crt"
            # The ORDERER_URL is hardcoded to use local orderer URL as of now
            ORDERER_URL="{{ .adminAddress }}"

            CHANNEL_LIST_QUERY_RESPONSE=$(osnadmin channel list --channelID ${CHANNEL_NAME} -o "${ORDERER_URL}" --ca-file "${OSN_TLS_CA_ROOT_CERT}" --client-cert "${ADMIN_TLS_SIGN_CERT}" --client-key "${ADMIN_TLS_PRIVATE_KEY}")
            if echo "$CHANNEL_LIST_QUERY_RESPONSE" | grep '404'; then
              echo "Creating channel....."
              if [ $ADD_ORDERER = false ]
              then
                osnadmin channel join --channelID "${CHANNEL_NAME}" --config-block orderer.genesis.block -o "${ORDERER_URL}" --ca-file "${OSN_TLS_CA_ROOT_CERT}" --client-cert "${ADMIN_TLS_SIGN_CERT}" --client-key "${ADMIN_TLS_PRIVATE_KEY}"
              else
                osnadmin channel join --channelID "${CHANNEL_NAME}" --config-block ${CHANNEL_NAME}_config_block.pb -o "${ORDERER_URL}" --ca-file "${OSN_TLS_CA_ROOT_CERT}" --client-cert "${ADMIN_TLS_SIGN_CERT}" --client-key "${ADMIN_TLS_PRIVATE_KEY}"
              fi 
              osnadmin channel list -o "${ORDERER_URL}" --ca-file "${OSN_TLS_CA_ROOT_CERT}" --client-cert "${ADMIN_TLS_SIGN_CERT}" --client-key "${ADMIN_TLS_PRIVATE_KEY}"
            elif echo "$CHANNEL_LIST_QUERY_RESPONSE" | grep '200\|201'; then
              echo "Channel ${CHANNEL_NAME}, is already created for url: ${ORDERER_URL}"
              echo "$CHANNEL_LIST_QUERY_RESPONSE"
            else
              echo $CHANNEL_LIST_QUERY_RESPONSE
            fi
          {{- end }}
        workingDir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
        volumeMounts:
        - name: certificates
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/crypto
          readOnly: true
        {{- if not $.Values.orderer.addOrderer }}
        - name: genesis
          mountPath: /opt/gopath/src/github.com/hyperledger/fabric/orderer/genesis
          readOnly: true
        {{ end }}
