##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

global:
  # HLF Network Version
  #Eg. version: 2.5.4
  version: 2.5.4
  #Provide the service account name which will be created.
  serviceAccountName: vault-auth
  cluster:
    provider: aws  # choose from: minikube | aws | azure | gcp
    cloudNativeServices: false # only 'false' is implemented
  vault:
    #Provide the type of vault
    #Eg. type: hashicorp
    type: hashicorp
    #Provide the vaultrole for an organization
    #Eg. vaultrole: org1-vault-role
    role: vault-role
    #Provide the vault server address
    #Eg. vaultaddress: http://Vault-884963190.eu-west-1.elb.amazonaws.com
    address:
    #Provide the kubernetes auth backed configured in vault for an organization
    #Eg. authpath: supplychain
    authPath: supplychain
    #Provide the secret engine.
    secretEngine: secretsv2
    #Provide the vault path where the secrets will be stored
    secretPrefix: "data/supplychain"
    #Kuberenetes secret for vault ca.cert
    #Enable or disable TLS for vault communication if value present or not
    #Eg. tls: vaultca
    tls: 

  proxy:
    #This will be the proxy/ingress provider. Can have values "none" or "haproxy"
    #Eg. provider: "haproxy"
    provider: "haproxy"
    #This field contains the external URL of the organization
    #Eg. externalUrlSuffix: test.blockchaincloudpoc.com
    externalUrlSuffix: test.blockchaincloudpoc.com
    #This field contains the external port on haproxy
    #Eg. port: 443
    port: 443

storage:
  #Flag to create new storage class for organization. Set to false for existing storage class.
  #Eg. enabled: true
  enabled: true
  #Provide storage size for Peer Volume
  #Eg. peer: 512Mi
  peer: 512Mi
  #Provide storage size for CouchDB Volume
  #Eg. couchdb: 512Mi
  couchdb: 512Mi
  # NOTE: when you set this to Retain, the volume WILL persist after the chart is delete and you need to manually delete it
  reclaimPolicy: "Delete" # choose from: Delete | Retain
  volumeBindingMode: Immediate # choose from: Immediate | WaitForFirstConsumer
  allowedTopologies:
    enabled: false

certs:
  # Flag indicating the creation of certificates.
  generateCertificates: true
  orgData:
    caAddress: ca.supplychain-net:7051
    caAdminUser: supplychain-admin
    caAdminPassword: supplychain-adminpw
    #Provide organization's name in lowercases
    #Eg. orgName: supplychain 
    orgName: supplychain
    #Provide organization's type (orderer or peer)
    #Eg. component_type: orderer
    type: peer
    #Provide organization's subject
    #Eg. "O=Orderer,L=51.50/-0.13/London,C=GB"
    componentSubject: "O=Orderer,L=51.50/-0.13/London,C=GB"

  users: 
    # Generating User Certificates with custom attributes using Fabric CA in Bevel for Peer Organizations
    usersList:
      - user:
        identity: user1
        attributes:
        - key: "hf.Revoker"
          value: "true"
    #Base64 encoded list of users
    #Eg. IC0gdXNlcjoKICAgICAgICAgIGlkZW50aXR5OiB1c2VyMQogICAgICAgICAgYXR0cmlidXRlczoKICAgICAgICAgICAgLSBrZXk6IGtleTEKICAgICAgIgICAgICAgIC0ga2V5OiBrZXkyCiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlMgogICAgICAgIC0gdXNlcjoKICAgICAgICAgIGlkZW50aXR5OiB1c2VyMgogICAgICAgICAgYXR0cmlidXRlczoKICAgICAgICAgICAgLSBrZXk6IGtleTEKICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUxCiAgICAgICAgICAgIC0ga2V5OiBrZXkzCiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlMw==
    usersListAnsible:
  settings:
    #Flag to create configmaps for the organization. This flag must be set to true when installing the first orderer/peer in organization and false for others.
    createConfigMaps: false
    refreshCertValue: false
    addPeerValue: false
    removeCertsOnDelete: false
    removeOrdererTlsOnDelete: false

image:
  #Provide the valid image repository for fabric couchdb
  #Eg. couchdb: hyperledger/fabric-couchdb
  couchdb: ghcr.io/hyperledger/bevel-fabric-couchdb
  #Provide the valid repository for fabric peer
  #Eg. peer: hyperledger/fabric-peer
  peer: ghcr.io/hyperledger/bevel-fabric-peer
  #Provide the valid image name and version to read certificates from vault server 
  #Eg. alpineUtils: ghcr.io/hyperledger/bevel-alpine:latest
  alpineUtils: ghcr.io/hyperledger/bevel-alpine:latest
  #Provide the secret to use if private repository
  #Eg. pullSecret: regcred
  pullSecret:

peer:
  #Provide the url of the gossipping peer. If empty, this peer's own address will be used
  #Eg. gossipPeerAddress: peer1.supplychain-net:7051
  gossipPeerAddress: peer1.supplychain-net:7051
  #Provide the logLevel for organization's peer
  #Eg. logLevel: info
  logLevel: info
  #Provide the localMspId for organization
  #Eg. localMspId: supplychainMSP
  localMspId: supplychainMSP
  #Provide the value for tlsStatus to be true or false for organization's peer
  #Eg. tlsStatus: true
  tlsStatus: true
  #Flag to enable CLI for this peer
  #Eg. cliEnabled: true
  cliEnabled: false
  #Provide the address for orderer; optional is cliEnabled: false
  #Eg. ordererAddress: orderer1.test.blockchaincloudpoc.com:443
  ordererAddress: orderer1.supplychain-net:7050
  #Provide a valid chaincode builder image for Fabric
  #Eg. builder: hyperledger/fabric-ccenv
  builder: hyperledger/fabric-ccenv
  couchdb:
    #Provide the username for couchdb login
    #Eg. username: supplychain-user
    username: supplychain-user
    #Provide the password for couchdb login
    #Eg. password: supplychain-userpw
    password: supplychain-userpw
  mspConfig:
    #Provide the members of the MSP in organizational unit identifiers
    #Eg.organizationalUnitIdentifiers:
    #     - client
    #     - peer
    # following for 2.2.x
    #     - admin
    #     - orderer
    organizationalUnitIdentifiers:
    nodeOUs:
      #Provide OU which will be used to identify node as client
      #Eg.clientOUIdentifier: client
      clientOUIdentifier: client
      #Provide OU which will be used to identify node as peer
      #Eg.peerOUIdentifier: peer
      peerOUIdentifier: peer
      # following for 2.2.x
      #Provide OU which will be used to identify node as admin
      #Eg.adminOUIdentifier: admin 
      adminOUIdentifier: admin
      #Provide OU which will be used to identify node as orderer
      #Eg.ordererOUIdentifier: orderer
      ordererOUIdentifier: orderer
  #Provide the serviceType for a peer
  #Eg. serviceType: NodePort
  serviceType: ClusterIP 
  loadBalancerType: ""
  ports:
    grpc:
      #Provide a nodePort for grpc service in the range of 30000-32767 (optional)
      #Eg. nodePort: 30001
      nodePort:
      #Provide a cluster IP port for grpc service to be exposed
      #Eg. clusterIpPort: 7051
      clusterIpPort: 7051
    events:
      #Provide a nodePort for event service in the range of 30000-32767 (optional)
      #Eg. nodePort: 30002
      nodePort:
      #Provide a cluster IP port for event service to be exposed
      #Eg. clusterIpPort: 7053
      clusterIpPort: 7053
    couchdb:
      #Provide a nodePort for couchdb service in the range of 30000-32767 (optional)
      #Eg. nodePort: 30003
      nodePort:
      #Provide a cluster IP port for couchdb service to be exposed
      #Eg. clusterIpPort: 5984
      clusterIpPort: 5984
    metrics:
      enabled: false
      clusterIpPort: 9443 
  resources:
    limits:
      # Provide the limit memory for node
      # Eg. memory: 1Gi
      memory: 1Gi
      # Provide the limit cpu for node
      # Eg. cpu: 1
      cpu: 1
    requests:
      # Provide the requests memory for node
      # Eg. memory: 512M
      memory: 512M
      # Provide the requests cpu for node
      # Eg. cpu: 0.25
      cpu: 0.25
  #Flag to be set to true when network is upgraded
  upgrade: false
  healthCheck: 
    retries: 20
    sleepTimeAfterError: 15

labels:
  service: []
  pvc: []
  deployment: []
