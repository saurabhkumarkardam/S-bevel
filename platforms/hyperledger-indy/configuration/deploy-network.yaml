##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

##############################################################################################
# Playbook to create deployment files for namespaces, service account and clusterrolebinding
# Playbook arguments: complete network.yaml
##############################################################################################
---
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:
  # clean build directory
  - name: Remove build directory
    file:
      path: "./build"
      state: absent

  # Validate input network.yaml
  - name: "Validating network.yaml"
    include_role:
      name: check/validation

  # Create namespaces for organizations
  - name: "Create namespace"
    include_role:
      name: create/namespace
    vars:
      component_name: "{{ org.name | lower }}-ns"
      component_type_name: "{{ org.type | lower }}"
      kubernetes: "{{ org.k8s }}"
      release_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ org.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Create necessary Kubernetes secrets for each organization
  - name: "Create k8s secrets"
    include_role:
      name: create/secrets
    vars:
      component_ns: "{{ org.name | lower }}-ns"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Generate keys for each nodes
  - name: "Generate keys"
    include_role:
      name: setup/generate-keys
    vars:
      org_name: "{{ org.name | lower }}"
      stewards: "{{ org.services.stewards }}"
      cloud_provider: "{{ org.cloud_provider | lower }}"
      vault: "{{ org.vault }}"
      kubernetes: "{{ org.k8s }}"
      component_type: "generate-keys"
      component_ns: "{{ org_name }}-ns"
      component_name: "{{ org_name }}-keys"
      values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}"
      charts_dir: "{{ org.gitops.chart_source }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Get each node keys for the Genesis setup
  - name: "Get keys for the Genesis setup"
    include_role:
      name: setup/genesis-node-keys
    vars:
      component_ns: "{{ org.name | lower }}-ns"
      kubernetes: "{{ org.k8s }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Install Genesis
  - name: "Install Genesis"
    include_role:
      name: setup/genesis

  # Install Steward nodes
  - name: Install Steward nodes
    include_role:
      name: setup/stewards
    vars:
      org_name: "{{ org.name | lower }}"
      cloud_provider: "{{ org.cloud_provider | lower }}"
      kubernetes: "{{ org.k8s }}"
      component_ns: "{{ org_name }}-ns"
      component_type: "stewards"
      values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}"
      charts_dir: "{{ org.gitops.chart_source }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Install Endorser node
  - name: "Install Endorser node"
    include_role:
      name: setup/endorser
    vars:
      org_name: "{{ org.name | lower }}"
      endorser: "{{ org.services.endorser.name | lower }}"
      trustee: "{{ org.services.trustee.name | lower }}"
      kubernetes: "{{ org.k8s }}"
      component_name: "{{ endorser }}"
      component_ns: "{{ org_name }}-ns"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}/{{ org_name }}/build"
      charts_dir: "{{ org.gitops.chart_source }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when:
    - (org.services.endorser is defined) and (org.services.endorser.name | length > 0)

  # These variables can be overriden from the command line
  vars: 
    install_os: "linux"                           # Default to linux OS
    install_arch:  "amd64"                        # Default to amd64 architecture
    bin_install_dir:  "~/bin"                     # Default to /bin install directory for binaries
    add_new_org: false                            # Default to false when not defined.
    add_new_org_network_trustee_present: true     # Default to true when not defined.
    add_new_org_new_nyms_on_ledger_present: true  # Default to true when not defined.
