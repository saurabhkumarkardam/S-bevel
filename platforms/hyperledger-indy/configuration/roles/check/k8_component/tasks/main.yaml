##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
# Task to check if ServiceAccount or configmap is created
# This task will try for a maximum of 10 times with an interval of
# 35 seconds between each try
- name: Wait for {{ component_type }} {{ component_name }}
  k8s_info:
    kind: "{{ component_type }}"
    name: "{{ component_name }}"
    namespace: "{{ component_ns }}"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: component_data
  retries: "{{ network.env.retry_count}}"
  delay: 35
  until: component_data.resources|length > 0
  when: component_type == "ConfigMap"

# Get a service account token
- name: "Get a ServiceAccount token for {{ component_name }}"
  vars:
    service_account: "{{ component_name }}"
    role: "ro"
  shell: |
    secret="{{ service_account }}-token"
    kube_token=$(kubectl --kubeconfig={{ kubernetes.config_file }} -n {{ component_ns }} get secret ${secret} -o jsonpath="{.data.token}" | base64 --decode)
    vault_token=$(curl --request POST --data '{"jwt": "'"$kube_token"'", "role": "{{ role }}"}' {{ vault.url }}/v1/auth/kubernetes-{{ organization }}-bevel-ac-auth/login | jq -j '.auth.client_token')
    echo $vault_token
  register: token_output
  when: component_type == "GetServiceAccount"

# Store token
- name: "Store token"
  set_fact:
    ac_vault_tokens: "{{ ac_vault_tokens | default({}) | combine( {organization: token_output.stdout} ) }}"
  when: component_type == "GetServiceAccount"
