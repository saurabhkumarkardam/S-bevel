---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "quorum-tessera-node.fullname" . }}-pre-install-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app.kubernetes.io/name: pre-install-hook
    app.kubernetes.io/component: keygen
    app.kubernetes.io/part-of: {{ include "quorum-tessera-node.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pre-install-hook
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      restartPolicy: "OnFailure"
      containers:
        - name: {{ template "quorum-tessera-node.fullname" . }}-keygen
          image: {{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 0
          {{- if (eq .Values.global.vault.type "hashicorp") }}
          volumeMounts:
            - name: scripts-volume
              mountPath: /scripts/bevel-vault.sh
              subPath: bevel-vault.sh
          env:
          - name: VAULT_ADDR
            value: "{{ .Values.global.vault.address }}"
          - name: VAULT_SECRET_ENGINE
            value: "{{ .Values.global.vault.secretEngine }}"
          - name: VAULT_SECRET_PREFIX
            value: "{{ .Values.global.vault.secretPrefix }}"
          - name: KUBERNETES_AUTH_PATH
            value: "{{ .Values.global.vault.authPath }}"
          - name: VAULT_APP_ROLE
            value: "{{ .Values.global.vault.role }}"
          - name: VAULT_TYPE
            value: "{{ .Values.global.vault.type }}"
          {{- end }}
          command:
            - /bin/bash
            - -c
          args:
            - |

{{- if eq .Values.global.vault.type "aws-secrets-manager" }}
              . /scripts/package-manager.sh

              # Define the packages to install
              packages_to_install="python3-pip python3-boto3"
              install_packages "$packages_to_install"
{{- end }}
              function update_tessera_peers_configmap {
                kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o json
                # first time a tx node is deployed and there is no configmap
                if [ $? -ne 0 ]; then
                  echo "No tessera-peers found, creating a new one..."
                  echo "[{ \"url\": \"{{ include "quorum-tessera-node.tesseraURL" . }}\" }]"  > /tmp/tessera-peers
                  kubectl --namespace {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers

                # update the entries
                else
                  echo "Tessera-peers found, updating existing..."
                  echo $(kubectl -n {{ .Release.Namespace }} get configmap tessera-peers -o jsonpath='{.data.tesseraPeers}' ) > /tmp/tessera-peers.raw
                  NEEDLE="{{ include "quorum-tessera-node.tesseraURL" . }}"
                  cat /tmp/tessera-peers.raw | jq --arg NEEDLE "$NEEDLE" '. += [{"url": $NEEDLE}] | unique ' > /tmp/tessera-peers
                  kubectl -n {{ .Release.Namespace }} create configmap tessera-peers --from-file=tesseraPeers=/tmp/tessera-peers -o yaml --dry-run=client | kubectl replace -f -
                fi
              }
              
              # reads all the required data from the file path
              readSecretData() {
                local fpath="$1"
              
                local privateKey=$(cat ${fpath}/tessera.key | base64 -w 0)
                local publicKey=$(cat ${fpath}/tessera.pub)
                local password=$(cat ${fpath}/passwordFile.txt)
                
                echo "${privateKey}" "${publicKey}" "${password}"
              }
              
              # constructs the JSON payload using the extracted secret values
              createJsonPayload() {
                local privateKey="$1"
                local publicKey="$2"
                local password="$3"

                echo "
                  {
                    \"data\":
                      {
                        \"privateKey_base64\": \"${privateKey}\",
                        \"publicKey\": \"${publicKey}\",
                        \"password\": \"${password}\"
                      }
                  }" > tesseraPayload.json
              }
              
              # checks if a secret exists in AWS Secret Manager, and either creates or updates it
              manageAwsSecret() {
                local key="$1"
                local payload_file="$2"
                
                # Check if the secret exists in AWS Secret Manager
                python3 /etc/config/aws-secret-manager-script.py get_secret "${key}" > /tmp/response.json
                # If the secret does not exist, create it, otherwise update it
                if grep -q "ResourceNotFoundException" /tmp/response.json; then
                  python3 /etc/config/aws-secret-manager-script.py create_secret "${key}" "${payload_file}"
                else
                  python3 /etc/config/aws-secret-manager-script.py update_secret "${key}" "${payload_file}"
                fi
              }
              
              # Function to create a Kubernetes secret
              createKubernetesSecret() {
                local key="$1"
                local privateKey="$2"
                local publicKey="$3"
                local password="$4"
                
                # Create the Kubernetes secret
                kubectl create secret generic ${key} --namespace "{{ .Release.Namespace }}" \
                  --from-literal=tm.key="${privateKey}" \
                  --from-literal=tm.pub="${publicKey}" \
                  --from-literal=tm.password="${password}" \
                  --dry-run=client -o yaml | kubectl apply -f -
              }
              
{{- if (eq .Values.global.vault.type "hashicorp") }}
              . /scripts/bevel-vault.sh
              echo "Getting vault Token..."
              vaultBevelFunc "init"
              function safeWriteSecret {
                key=$1
                fpath=$2
                #Read if secret exists in Vault
                vaultBevelFunc 'readJson' "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/${key}-keys"
                if [ "$SECRETS_AVAILABLE" == "yes" ]
                then
                  # Get secret from Vault and create the k8s secret if it does not exist
                  kubectl get secret ${key}-keys --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
                  if [ $? -ne 0 ]; then
                    privateKey=$(echo ${VAULT_SECRET} | jq -r '.["privateKey_base64"]' | base64 -d)
                    publicKey=$(echo ${VAULT_SECRET} | jq -r '.["publicKey"]')
                    password=$(echo ${VAULT_SECRET} | jq -r '.["password"]')
                    echo $privateKey > /tmp/privateKey
                    kubectl create secret generic {{ template "quorum-tessera-node.fullname" . }}-keys --namespace {{ .Release.Namespace }} \
                      --from-file=tm.key=/tmp/privateKey --from-literal=tm.pub=${publicKey} \
                      --from-literal=tm.password=${password}
                  fi
                else
                  # Save Tessera secrets to Vault
                  privateKey=$(cat ${fpath}/tessera.key | base64 -w 0)
                  publicKey=$(cat ${fpath}/tessera.pub)
                  password=$(cat ${fpath}/passwordFile.txt)
                  # create a JSON file for the data related to node crypto
                  echo "
                  {
                    \"data\":
                      {
                        \"privateKey_base64\": \"${privateKey}\",
                        \"publicKey\": \"${publicKey}\",
                        \"password\": \"${password}\"
                      }
                  }" > tessera.json
                  vaultBevelFunc 'write' "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/${key}-keys" 'tessera.json'
                  rm tessera.json
                fi
              }
{{- else if eq .Values.global.vault.type "aws-secrets-manager" }}
                local key=$1
                local fpath=$2
                
                # Read secret data
                read -r privateKey publicKey password <<< $(readSecretData "$fpath")
                # Create JSON payload
                createJsonPayload "$privateKey" "$publicKey" "$password"
                # Manage AWS Secret
                manageAwsSecret "${key}" "tesseraPayload .json"
                # Create Kubernetes Secret
                createKubernetesSecret "$key" "$privateKey" "$publicKey" "$password"
{{- else }}
              function safeWriteSecret {
                # Placeholder:
                  # - Implement code to fetch the keys if using any cloud-native service or platform different from HashiCorp to store the keys
                  # - After fetching the keys, create Kubernetes secrets from them
                  # - For guidance, refer to the code written for HashiCorp Vault for the same purpose
                return 0
              }
{{- end }}

              echo "{{ template "quorum-tessera-node.fullname" . }} pre-install-hook ..."
              echo "Tessera keys generation ..."
              FOLDER_PATH=$(quorum-genesis-tool --validators 0 --members 1 --bootnodes 0 --tesseraEnabled true \
                --tesseraPassword {{ .Values.tessera.password }} --outputPath /tmp/tessera | tail -1 | sed -e "s/^Artifacts in folder: //")
              if [ ! -f "$FOLDER_PATH/member0/passwordFile.txt" ]; then
                echo "" > $FOLDER_PATH/member0/passwordFile.txt
              fi
              echo "Creating {{ template "quorum-tessera-node.fullname" . }}-keys secrets in k8s ..."
{{- if and (ne .Values.global.cluster.provider "minikube") (.Values.global.cluster.cloudNativeServices) }}
              safeWriteSecret {{ template "quorum-tessera-node.fullname" . }}-tmkey $FOLDER_PATH/member0/tessera.key
              safeWriteSecret {{ template "quorum-tessera-node.fullname" . }}-tmkeypub $FOLDER_PATH/member0/tessera.pub
              safeWriteSecret {{ template "quorum-tessera-node.fullname" . }}-tmpassword $FOLDER_PATH/member0/passwordFile.txt
{{- else }}
              safeWriteSecret {{ template "quorum-tessera-node.fullname" . }} $FOLDER_PATH/member0
{{- end }}

              if ! kubectl get secret {{ template "quorum-tessera-node.fullname" . }}-keys --namespace {{ .Release.Namespace }} &> /dev/null; then
                # Secret
                kubectl create secret generic {{ template "quorum-tessera-node.fullname" . }}-keys --namespace {{ .Release.Namespace }} \
                --from-file=tm.key=$FOLDER_PATH/member0/tessera.key \
                --from-file=tm.pub=$FOLDER_PATH/member0/tessera.pub \
                --from-file=tm.password=$FOLDER_PATH/member0/passwordFile.txt
              fi
              update_tessera_peers_configmap
              echo "Completed"
      volumes:
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
          defaultMode: 0777
