---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Values.name }}-generate-tls-secret"
  labels:
    app.kubernetes.io/name: quorum-tlscerts-gen # besu-genesis-job-cleanup
    # app.kubernetes.io/component: genesis-job-cleanup
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/managed-by: helm
  namespace: {{ .Release.Namespace }}
  annotations:
    # helm.sh/hook: "post-install"
    # helm.sh/hook-weight: "0"
    # helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: quorum-tlscerts-gen # besu-genesis-job-cleanup
        # app.kubernetes.io/component: genesis-job-cleanup
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/managed-by: helm
    spec:
      serviceAccountName: {{ $.Values.global.vault.serviceAccountName }} 
      restartPolicy: "Never"
      containers:
        - name: generate-tls-secret
          image: ghcr.io/hyperledger/bevel-alpine:latest
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: VAULT_ADDR
              value: {{ $.Values.global.vault.address }}
            - name: VAULT_APP_ROLE
              value: {{.Values.global.vault.role}}
            - name: KUBERNETES_AUTH_PATH
              value: {{ $.Values.global.vault.authPath }}
            - name: CERTS_SECRET_PREFIX
              value: "{{ $.Values.global.vault.secretEngine }}/{{ $.Values.global.vault.secretPrefix }}"
            - name: MOUNT_PATH
              value: "/certcheck"
            - name: VAULT_TYPE
              value: "{{ $.Values.global.vault.type }}"  
          command: ["sh", "-c"]
          args:
            - |-
                #!/usr/bin/env sh
                . /scripts/bevel-vault.sh

                sleep 10s

                # Calling a function to retrieve the vault token.
                vaultBevelFunc "init"

                # Calling a function to retrieve secrets from Vault only if they exist.
                vaultBevelFunc "readJson" "${CERTS_SECRET_PREFIX}/crypto/{{ $.Values.name }}/certs"

                A_CERT=$(echo ${VAULT_SECRET} | jq -r '.["ambassadorcrt"]' 2>&1)
                A_KEY=$(echo ${VAULT_SECRET} | jq -r '.["ambassadorkey"]' 2>&1)

                # Save the certificate and key to files
                echo "$A_CERT" > /tmp/ambassador.crt
                echo "$A_KEY" > /tmp/ambassador.key

                # # Create Kubernetes secret
                # KUBECONFIG=/home/saurabh/.kube/bevel-dev-cluster kubectl create secret tls {{ $.Values.name }}-ambassador-certs \
                #             --cert=/tmp/ambassador.crt \
                #             --key=/tmp/ambassador.key \
                #             -n {{ .Release.Namespace }}
          volumeMounts:
          - name: scripts-volume
            mountPath: /scripts/bevel-vault.sh
            subPath: bevel-vault.sh
      volumes:
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
