##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This playbook deploys a DLT network on existing Kubernetes clusters
# The Kubernetes clusters should already be created and the infomation to connect to the
#  clusters be updated in the network.yaml file that is used as an input to this playbook
###########################################################################################
# To Run this playbook from this directory, use the following command (network.yaml also in this directory)
#  ansible-playbook deploy-network.yaml -e "@./network.yaml"
############################################################################################
# Please ensure that the ../../shared/configuration playbooks have been run using the same network.yaml
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:
  # # delete build directory
  # - name: Remove build directory
  #   file:
  #     path: "./build"
  #     state: absent

  # # Validate input network.yaml
  # - name: "Validating network.yaml"
  #   include_role:
  #     name: check/validation

  # # create namespace
  # - name: "Create namespace"
  #   include_role:
  #     name: create/namespace
  #   vars:
  #     component_ns: "{{ item.name | lower }}-quo"
  #     organisation: "{{ item.name | lower }}"
  #     kubernetes: "{{ item.k8s }}"
  #     gitops: "{{ item.gitops }}"
  #   loop: "{{ network['organizations'] }}"
  
  # # Create necessary secrets
  # - name: "Create k8s secrets"
  #   include_role:
  #     name: create/secrets
  #   vars:
  #     component_ns: "{{ org.name | lower }}-quo"
  #     kubernetes: "{{ org.k8s }}"
  #     vault: "{{ org.vault }}"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: org
  #   when: 
  #   - org.org_status is not defined or org.org_status == 'new'

  # - name: Pause 1
  #   pause:
  #     seconds: 10

################################################################# NR
  # # Execute primary genesis for the first organization
  # - name: "Setup primary genesis with first org as Validators"
  #   include_role:
  #     name: setup/genesis/primary
  #   vars:
  #     build_path: "./build"
  #     org: "{{ network['organizations'] | first }}"
  #     name: "{{ org.name | lower }}"
  #     component_ns: "{{ org.name | lower }}-quo"
  #     kubernetes: "{{ org.k8s }}"
  #     vault: "{{ org.vault }}"
  #     gitops: "{{ org.gitops }}"
  #     charts_dir: "{{ org.gitops.chart_source }}"
  #     values_dir: "./build/{{ component_ns }}"
  #     validator_count: "{{ total_validators | int }}"
  #   when: 
  #     - not (add_new_org | bool)
################################################################# NR

  # # Install Genesis
  # - name: "Install Genesis"
  #   include_role:
  #     name: setup/genesis_new/primary_genesis
  #   vars:
  #     validator_count: "{{ total_validators | int }}"

  - name: Pause 2
    pause:
      minutes: 1

  - name: "Deploy nodes"
    include_role:
      name: setup/nodes
    vars:
      org_name: "{{ org.name | lower }}"
      component_ns: "{{ org_name }}-quo"
      validators: "{{ org.services.validators }}"
      members: "{{ org.services.peers }}"
      cloud_provider: "{{ org.cloud_provider | lower }}"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      gitops: "{{ org.gitops }}"
      charts_dir: "{{ org.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ org_name }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # # # This role deploy validator nodes
  # - name: "Deploy validator nodes"
  #   include_role:
  #     name: create/validator_node
  #   vars:
  #     build_path: "./build"
  #     org: "{{ network['organizations'] | first }}"
  #     name: "{{ org.name | lower }}"
  #     component_ns: "{{ org.name | lower }}-quo"
  #     kubernetes: "{{ org.k8s }}"
  #     vault: "{{ org.vault }}"
  #     gitops: "{{ org.gitops }}"
  #     charts_dir: "{{ org.gitops.chart_source }}"
  #     values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ component_ns }}"
  #   when: 
  #   - org.org_status is not defined or org.org_status == 'new'

  # - name: Pause 3
  #   pause:
  #     minutes: 1

  # # Deploy member nodes
  # - name: "Deploy member nodes with tessera transaction manager"
  #   include_role:
  #     name: create/member_node
  #   vars:
  #     build_path: "./build"
  #     kubernetes: "{{ org.k8s }}"
  #     name: "{{ org.name | lower }}"
  #     firstorg: "{{ network['organizations'] | first }}"
  #     consensus: "{{ network.config.consensus }}"
  #     component_ns: "{{ org.name | lower }}-quo"
  #     vault: "{{ org.vault }}"
  #     gitops: "{{ org.gitops }}"
  #     charts_dir: "{{ org.gitops.chart_source }}"
  #     values_dir: "{{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ component_ns }}"
  #     geth_data: "{{ network.config.bootnode | default('null') }}"
  #   loop: "{{ network['organizations'] }}"
  #   loop_control:
  #     loop_var: org
  #   when: 
  #     - org.org_status is not defined or org.org_status == 'new'

  # - name: Pause 4
  #   pause:
  #     minutes: 1

  #These variables can be overriden from the command line
  vars:
    install_os: "linux"           # Default to linux OS
    install_arch:  "amd64"        # Default to amd64 architecture
    bin_install_dir:  "~/bin"     # Default to /bin install directory for binaries
    add_new_org: false            # 'add_new_org' flag, defaults to false when not defined.
