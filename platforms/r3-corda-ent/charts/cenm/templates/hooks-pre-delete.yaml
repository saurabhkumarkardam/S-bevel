---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "cenm.fullname" . }}-pre-delete-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: pre-delete
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: "hook-succeeded"
  labels:
    app.kubernetes.io/name: pre-delete-hook
    app.kubernetes.io/component: cleanup
    app.kubernetes.io/part-of: {{ include "cenm.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pre-delete-hook
        app.kubernetes.io/component: cleanup
        app.kubernetes.io/part-of: {{ include "cenm.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
    spec:
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      restartPolicy: "Never"
      containers:
        - name: {{ template "cenm.fullname" . }}-cleanup
          image: "{{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |

              echo "{{ template "cenm.fullname" . }} pre-delete-hook ..."

{{- if and (ne .Values.global.cluster.provider "minikube") (.Values.global.cluster.cloudNativeServices) }}
              # placeholder for cloudNative deleteSecret function
{{- else }}

              function deleteSecret {
                key=$1
                # kubectl delete secret ${key} --namespace {{ .Release.Namespace }}
                if kubectl get secret "${key}" --namespace "{{ .Release.Namespace }}" &> /dev/null; then
                    kubectl delete secret "${key}" --namespace "{{ .Release.Namespace }}"
                    echo "Secret '${key}' deleted."
                else
                    echo "Secret '${key}' does not exist."
                fi
              }

{{- end }}

{{- if .Values.settings.removeKeysOnDelete }}

{{- if and (ne .Values.global.cluster.provider "minikube") (.Values.global.cluster.cloudNativeServices) }}
              # placeholder for cloudNative deleteSecret function
{{- else }}
              deleteSecret cenm-certs
{{- end }}

{{- end }}
              echo "Completed"
