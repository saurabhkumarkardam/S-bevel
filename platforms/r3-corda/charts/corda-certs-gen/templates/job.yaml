##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "corda-certs-gen.name" . }}"
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-delete-policy: "before-hook-creation"
  labels:
    app: "{{ include "corda-certs-gen.name" . }}"
    app.kubernetes.io/name: "{{ include "corda-certs-gen.name" . }}"
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: "{{ include "corda-certs-gen.name" . }}"
        app.kubernetes.io/name: "{{ include "corda-certs-gen.name" . }}"
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: "OnFailure"
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      serviceAccountName: {{ .Values.global.serviceAccountName }}        
      securityContext:
        fsGroup: 1000
      volumes:
        - name: certificates
          emptyDir:
            medium: Memory
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777
      initContainers:
    {{- if (eq .Values.global.vault.type "hashicorp") }}
      - name: init-check-certificates
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: VAULT_ADDR
          value: "{{ $.Values.global.vault.address }}"
        - name: VAULT_SECRET_ENGINE
          value: "{{ $.Values.global.vault.secretEngine }}"
        - name: VAULT_SECRET_PREFIX
          value: "{{ $.Values.global.vault.secretPrefix }}"
        - name: KUBERNETES_AUTH_PATH
          value: "{{ $.Values.global.vault.authPath }}"
        - name: VAULT_APP_ROLE
          value: "{{ $.Values.global.vault.role }}"
        - name: VAULT_TYPE
          value: "{{ $.Values.global.vault.type }}"
        command: ["sh", "-c"]
        args:
        - |-

          # Source the bevel-vault.sh script to perform the Vault-CURD operations
          . /scripts/bevel-vault.sh

          # Get the Vault token
          echo "Getting vault Token..."
          vaultBevelFunc "init"
          echo "Logged into Vault"

          OUTPUT_PATH=/certificates/check_certs
          mkdir -p ${OUTPUT_PATH}
          # Obtain the ambassador TLS certificates from Vault if exists
          vault_secret_key="${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/{{ .Release.Name }}-tlscerts"
          echo "Checking certs in vault at path: ${vault_secret_key}"
          vaultBevelFunc "readJson" ${vault_secret_key}

          # Get the ambassador TLS data info from Vault
          cert=$(echo ${VAULT_SECRET} | jq -r '.["ambassadorcrt"]')

          # If the cert is null, empty, or contains a parse error, then the certificates do not exist in Vault
          if [ "$cert" == "null" ] || [[ "$cert" = "parse error"* ]] || [ "$cert" = "" ]
          then
            # Create a file to indicate that the ambassador TLS certificates are absent
            echo "Certficates absent in vault. Ignore error warning"
            touch ${OUTPUT_PATH}/absent.txt
          else
            echo "Certificates present in vault"
            touch ${OUTPUT_PATH}/present.txt
            AMBASSADORTLS_PATH=/certificates/ambassadortls
            mkdir -p ${AMBASSADORTLS_PATH}
            cert=$(echo ${VAULT_SECRET} | jq -r '.["ambassadorcrt"]' | base64 -d )
            key=$(echo ${VAULT_SECRET} | jq -r '.["ambassadorkey"]' | base64 -d )
            echo "${cert}" > ${AMBASSADORTLS_PATH}/ambassador.crt
            echo "${key}" > ${AMBASSADORTLS_PATH}/ambassador.key

      {{- if .Values.settings.networkServices }}
            cert=$(echo ${VAULT_SECRET} | jq -r '.["doormancrt"]' | base64 -d )
            key=$(echo ${VAULT_SECRET} | jq -r '.["doormankey"]' | base64 -d )
            echo "${cert}" > ${AMBASSADORTLS_PATH}/doorman.crt
            echo "${key}" > ${AMBASSADORTLS_PATH}/doorman.key
            cert=$(echo ${VAULT_SECRET} | jq -r '.["nmscrt"]' | base64 -d )
            key=$(echo ${VAULT_SECRET} | jq -r '.["nmskey"]' | base64 -d )
            echo "${cert}" > ${AMBASSADORTLS_PATH}/nms.crt
            echo "${key}" > ${AMBASSADORTLS_PATH}/nms.key
      {{- end }}

          fi 
          echo "Done checking for certificates in vault"
        
        volumeMounts:
          - name: certificates
            mountPath: /certificates
          - name: scripts-volume
            mountPath: /scripts/bevel-vault.sh
            subPath: bevel-vault.sh
    {{- end }}
      containers:
      - name: generate-certs
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        {{- if (eq .Values.global.vault.type "hashicorp") }}
        - name: VAULT_ADDR
          value: "{{ $.Values.global.vault.address }}"
        - name: VAULT_SECRET_ENGINE
          value: "{{ $.Values.global.vault.secretEngine }}"
        - name: VAULT_SECRET_PREFIX
          value: "{{ $.Values.global.vault.secretPrefix }}"
        - name: KUBERNETES_AUTH_PATH
          value: "{{ $.Values.global.vault.authPath }}"
        - name: VAULT_APP_ROLE
          value: "{{ $.Values.global.vault.role }}"
        - name: VAULT_TYPE
          value: "{{ $.Values.global.vault.type }}"
        {{- end }}
        - name: EXTERNAL_URL
          value: "{{ .Release.Name }}.{{ .Values.global.proxy.externalUrlSuffix }}"
        command: ["sh", "-c"]
        args:
        - |-
{{- if (eq .Values.global.vault.type "hashicorp") }}
          # Source the bevel-vault.sh script to perform the Vault-CURD operations
          . /scripts/bevel-vault.sh
          # Get the Vault token
          echo "Getting vault Token..."
          vaultBevelFunc "init"
          echo "Logged into Vault"
          function safeWriteSecret {
            key=$1
            fpath=$2
            # Use -w0 to get single line base64 -w0
            TLS_CERT=$(cat ${fpath}/ambassador.crt | base64 -w0)
            TLS_KEY=$(cat ${fpath}/ambassador.key | base64 -w0)
{{- if .Values.settings.networkServices }}
            DOORMAN_CERT=$(cat ${fpath}/doorman.crt | base64 -w0)
            DOORMAN_KEY=$(cat ${fpath}/doorman.key | base64 -w0)
            NMS_CERT=$(cat ${fpath}/nms.crt | base64 -w0)
            NMS_KEY=$(cat ${fpath}/nms.key | base64 -w0)

            echo "
            {
              \"data\":
                {
                  \"ambassadorcrt\": \"${TLS_CERT}\",
                  \"ambassadorkey\": \"${TLS_KEY}\",
                  \"doormancrt\": \"${DOORMAN_CERT}\",
                  \"doormankey\": \"${DOORMAN_KEY}\",
                  \"nmscrt\": \"${NMS_CERT}\",
                  \"nmskey\": \"${NMS_KEY}\"
                }
            }" > payload.json
{{- else }}
            echo "
            {
              \"data\":
                {
                  \"ambassadorcrt\": \"${TLS_CERT}\",
                  \"ambassadorkey\": \"${TLS_KEY}\"
                }
            }" > payload.json
{{- end }}
            # Copy the TLS certificates to the Vault
            vaultBevelFunc 'write' "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/${key}-tlscerts" 'payload.json'
          }
{{- else }}
          function safeWriteSecret {
            echo "Secrets are created. Add code specific to cloud provider vault here"
          }
{{- end }}
          # Set the directories path
          CERTS_CHECKS_PATH=/certificates/check_certs
          AMBASSADORTLS_PATH=/certificates/ambassadortls
          
          # if ambassadortls_absent file does not exist, create the certificates
          if [ -e ${CERTS_CHECKS_PATH}/present.txt ]
          then
            echo "Certificates present."
          else
            # create directories
            mkdir -p ${AMBASSADORTLS_PATH}

            cd ${AMBASSADORTLS_PATH}
            echo "[req]
            distinguished_name = dn
            [dn]
            [EXT]
            keyUsage=digitalSignature
            extendedKeyUsage=serverAuth
            subjectAltName = @alt_names
            [alt_names]
            DNS.1 = {{ .Release.Name }}.{{ .Values.global.proxy.externalUrlSuffix }}
            DNS.2 = {{ .Release.Name }}api.{{ .Values.global.proxy.externalUrlSuffix }}
            DNS.3 = {{ .Release.Name }}web.{{ .Values.global.proxy.externalUrlSuffix }}
            " > openssl.conf

            openssl req -x509 -out ambassador.crt -keyout ambassador.key -newkey rsa:2048 -nodes -sha256 \
              -subj "/CN=${EXTERNAL_URL}" -extensions EXT -config openssl.conf
          
        {{- if .Values.settings.networkServices }}
            echo "Create certificates for Network Services"
            DOORMAN_URL="{{ .Release.Name }}-doorman.{{ .Values.global.proxy.externalUrlSuffix }}" # 
            openssl req -x509 -out doorman.crt -keyout doorman.key -newkey rsa:2048 -nodes -sha256 \
              -subj "/CN=${DOORMAN_URL}" -addext "subjectAltName = DNS:${DOORMAN_URL}" -extensions EXT -config openssl.conf
            NMS_URL="{{ .Release.Name }}-nms.{{ .Values.global.proxy.externalUrlSuffix }}"
            openssl req -x509 -out nms.crt -keyout nms.key -newkey rsa:2048 -nodes -sha256 \
              -subj "/CN=${NMS_URL}" -addext "subjectAltName = DNS:${NMS_URL}" -extensions EXT -config openssl.conf

        {{- end }}
            echo "Done creating certificates, now store as secrets in k8s"
            safeWriteSecret {{ .Release.Name }} ${AMBASSADORTLS_PATH}
            
          fi;
          # Create tls secret with the certificates
          kubectl get secret --namespace {{ .Release.Namespace }} {{ .Release.Name }}-tls-certs
          if [ $? -ne 0 ]; then
            kubectl create secret tls --namespace {{ .Release.Namespace }} {{ .Release.Name }}-tls-certs \
            --cert=${AMBASSADORTLS_PATH}/ambassador.crt \
            --key=${AMBASSADORTLS_PATH}/ambassador.key
          fi;

        {{- if .Values.settings.networkServices }}
          kubectl get secret --namespace {{ .Release.Namespace }} doorman-tls-certs
          if [ $? -ne 0 ]; then
            kubectl create secret tls --namespace {{ .Release.Namespace }} doorman-tls-certs \
            --cert=${AMBASSADORTLS_PATH}/doorman.crt \
            --key=${AMBASSADORTLS_PATH}/doorman.key
          fi;
          kubectl get secret --namespace {{ .Release.Namespace }} nms-tls-certs
          if [ $? -ne 0 ]; then
            kubectl create secret tls --namespace {{ .Release.Namespace }} nms-tls-certs \
            --cert=${AMBASSADORTLS_PATH}/nms.crt \
            --key=${AMBASSADORTLS_PATH}/nms.key
          fi;

        {{- end }}
        volumeMounts:
          - name: certificates
            mountPath: /certificates
          - name: scripts-volume
            mountPath: /scripts/bevel-vault.sh
            subPath: bevel-vault.sh
