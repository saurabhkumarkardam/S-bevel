---
apiVersion: batch/v1
kind: Job
metadata:
  name: subs-genesis-pre-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app.kubernetes.io/name: pre-install-hook
    app.kubernetes.io/component: keygen
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
spec:
  backoffLimit: 1
  completions: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pre-install-hook
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ $.Values.global.serviceAccountName }}
      restartPolicy: "OnFailure"
      containers:
        - name: sup-keygen
          image: {{ $.Values.node.image }}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: scripts-volume
              mountPath: /scripts/bevel-vault.sh
              subPath: bevel-vault.sh
            - name: package-manager
              mountPath: /scripts/package-manager.sh
              subPath: package-manager.sh
          env:
          - name: VAULT_ADDR
            value: {{ $.Values.global.vault.address }}
          - name: KUBERNETES_AUTH_PATH
            value: {{ $.Values.global.vault.authPath }}
          - name: VAULT_APP_ROLE
            value: {{ $.Values.global.vault.role }}
          - name: MOUNT_PATH
            value: "/certcheck"
          - name: CERTS_SECRET_PREFIX
            value: {{ .Values.global.vault.secretPrefix }}        
          command: ["bash", "-c"]
          args:
            - |
                #!/usr/bin/env bash
                {{- if ne $.Values.node.image "docker.io/paritytech/substrate-playground-template-node-template:latest" }}
                    . /scripts/package-manager.sh
                    # Define the packages to install
                    packages_to_install="jq curl"
                    install_packages "$packages_to_install"
                    
                    # Check if jq is installed
                    if ! command -v jq &> /dev/null; then
                        # jq is not installed, download it
                        cd ~
                        curl -k -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
                        chmod +x jq
                        export PATH="$PATH:$HOME"
                    else
                        echo "jq is already installed via package-manager.sh."
                    fi
                    
                    # Download the latest version of kubectl
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    # Make the kubectl binary executable
                    chmod +x kubectl
                    # Move the binary to a directory in your PATH
                    mv kubectl /usr/local/bin/
                    # Verify installation
                    kubectl version --client
                    
                    if [[ $? > 0 ]]
                    then
                        # download jq
                        cd ~;
                        curl -k -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64;
                        chmod +x jq;
                        export PATH=$PATH:.;
                    else
                        echo "jq and curl was installed using apt-get."
                    fi;
                {{- end }}

                generate_key() {
                    echo ">>>>>>>>>> 3 - generate_key <<<<<<<<<<"
                    local scheme="$1"
                    local output_file="$2"
                    $command key generate --scheme "$scheme" --output-type json >> "$output_file"
                }

                generate_nodekey() {
                    echo ">>>>>>>>>> 2 - generate_nodekey <<<<<<<<<<"
                    local node_type="$1"
                    local node_index="$2"
                    local node_id="$($command key generate-node-key --file node_key 2>&1)"
                    
                    generate_key "Sr25519" "auraKeygenOutput_${node_type}${node_index}.json"
                    AURA_SEED=$(jq -r '.secretSeed' "auraKeygenOutput_${node_type}${node_index}.json")
                    AURA_ADDR=$(jq -r '.ss58Address' "auraKeygenOutput_${node_type}${node_index}.json")
                    
                    generate_key "Ed25519" "grandpaKeygenOutput_${node_type}${node_index}.json"
                    GRANDPA_SEED=$(jq -r '.secretSeed' "grandpaKeygenOutput_${node_type}${node_index}.json")
                    GRANDPA_ADDR=$(jq -r '.ss58Address' "grandpaKeygenOutput_${node_type}${node_index}.json")
                    
                    if [[ "$node_type" == "member" ]]; then
                        generate_key "Sr25519" "accKeygenOutput.json"
                        ACCOUNT_SEED=$(jq -r '.secretSeed' "accKeygenOutput.json")
                        ACCOUNT_ADDR=$(jq -r '.ss58Address' "accKeygenOutput.json")
                        
                        echo "{
                            \"data\": {
                                \"node_id\": \"$node_id\",
                                \"node_key\": \"$(cat node_key)\",
                                \"aura_seed\": \"$AURA_SEED\",
                                \"aura_addr\": \"$AURA_ADDR\",
                                \"grandpa_seed\": \"$GRANDPA_SEED\",
                                \"grandpa_addr\": \"$GRANDPA_ADDR\",
                                \"account_seed\": \"$ACCOUNT_SEED\",
                                \"account_addr\": \"$ACCOUNT_ADDR\",
                                \"account_file_b64\": \"$(cat accKeygenOutput.json | base64 -w 0)\",
                                \"aura_file_b64\": \"$(cat auraKeygenOutput_${node_type}${node_index}.json | base64 -w 0)\",
                                \"grandpa_file_b64\": \"$(cat grandpaKeygenOutput_${node_type}${node_index}.json | base64 -w 0)\"
                            }
                        }" > finalJSON.json
                        secret_name="substrate-node-${node_type}-${node_index}-keys"
                    else
                        echo "{
                            \"data\": {
                                \"node_id\": \"$node_id\",
                                \"node_key\": \"$(cat node_key)\",
                                \"aura_seed\": \"$AURA_SEED\",
                                \"aura_addr\": \"$AURA_ADDR\",
                                \"grandpa_seed\": \"$GRANDPA_SEED\",
                                \"grandpa_addr\": \"$GRANDPA_ADDR\",
                                \"aura_file_b64\": \"$(cat auraKeygenOutput_${node_type}${node_index}.json | base64 -w 0)\",
                                \"grandpa_file_b64\": \"$(cat grandpaKeygenOutput_${node_type}${node_index}.json | base64 -w 0)\"
                            }
                        }" > finalJSON.json
                        secret_name="substrate-node-${node_type}-${node_index}-keys"
                    fi
                    
                    if ! kubectl get secret "${secret_name}" --namespace "{{ .Release.Namespace }}" &> /dev/null; then
                        echo "creating secrets"
                        kubectl create secret generic "${secret_name}" --namespace "{{ .Release.Namespace }}" --from-file="substrate-node-keys"="finalJSON.json"
                    fi
                }
                echo ">>>>>>>>>> OUTSIDE <<<<<<<<<<"
                main() {
                    echo ">>>>>>>>>> MAIN FN <<<<<<<<<<"
                    command={{ $.Values.node.command }}
                    
                    for ((i=1; i<= {{ $.Values.node.member.count }}; i++)); do
                        echo "Generating nodekey for member-$i"
                        generate_nodekey "member" "$i"
                    done
                    
                    for ((i=1; i<= {{ $.Values.node.validator.count }}; i++)); do
                        echo "Generating nodekey for validator-$i"
                        generate_nodekey "validator" "$i"
                    done
                }
                main
      volumes:
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777
        - name: package-manager
          configMap:
            name: package-manager
