##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ $.Values.metadata.name }}"
  namespace: "{{ $.Values.metadata.namespace }}"
    annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app: "{{ $.Values.metadata.name }}"
    app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- include "labels.custom" . | nindent 2 }}
spec:
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/name: "{{ $.Values.metadata.name }}"
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- include "labels.custom" . | nindent 2 }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ $.Values.global.vault.serviceaccountname }}
      securityContext:
        fsGroup: 1000
      containers:
      - name: generate-genesis
        image: {{ $.Values.node.image }}:{{ $.Values.node.imageTag }}
        imagePullPolicy: {{ $.Values.node.pullPolicy }}
        volumeMounts:
          - name: certcheck
            mountPath: certcheck
          - name: package-manager
            mountPath: /scripts/package-manager.sh
            subPath: package-manager.sh
          - name: scripts-volume
            mountPath: /scripts/bevel-vault.sh
            subPath: bevel-vault.sh
        env:    
        - name: VAULT_ADDR
          value: {{ $.Values.global.vault.address }}
        - name: KUBERNETES_AUTH_PATH
          value: {{ $.Values.global.vault.authPath }}
        - name: VAULT_APP_ROLE
          value: {{ $.Values.global.vault.role }}
        - name: MOUNT_PATH
          value: "certcheck"
        - name: VAULT_SECRET_PREFIX # CERTS_SECRET_PREFIX
          value: {{ .Values.global.vault.secretPrefix }}
        - name: VAULT_SECRET_ENGINE
          value: "{{ .Values.global.vault.secretEngine }}"
        command: ["bash", "-c"]
        args:
        - |-
          #!/usr/bin/env bash

          {{- if ne $.Values.node.image "docker.io/paritytech/substrate-playground-template-node-template" }}
            . /scripts/package-manager.sh
            # Define the packages to install
            packages_to_install="jq bc curl unzip"
            install_packages "$packages_to_install"

            # Check if jq is installed
            if ! command -v jq &> /dev/null; then
              # jq is not installed, download it
              cd ~
              curl -k -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
              chmod +x jq
              export PATH="$PATH:$HOME"
            else
              echo "jq is already installed via package-manager.sh script."
            fi   
          {{- end }}

          # Check if the vault type is HashiCorp
{{- if eq .Values.global.vault.type "hashicorp" }}
                # Source the script containing vault-related functions
                . /scripts/bevel-vault.sh

                echo "Generate a customize token."
                vaultBevelFunc "init"
                
                # Function to safely write genesis
                safeWriteGenesis() {
                  # the vault cli is required for this job as the genesis file is too large to be passed in via a vault api call
                  echo "installing vault cli"
                  curl -O -L https://releases.hashicorp.com/vault/1.7.1/vault_1.7.1_linux_amd64.zip # NOTE: = v1.15.5 ~~
                  unzip vault_1.7.1_linux_amd64.zip
                  {{- if eq $.Values.node.image "docker.io/paritytech/substrate-playground-template-node-template" }}
                  export PATH=$PATH:~/workspace
                  {{- else }}
                  mv vault /bin
                  {{- end }}
                  vault --version

                  vaultBevelFunc "readJson" "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/genesis"
                  if [ "$SECRETS_AVAILABLE" == "no" ]
                    then
                      vault_secret_key="${VAULT_SECRET_ENGINE}/${KUBERNETES_AUTH_PATH}/genesis"
                      # Save the generated keys to VAULT
                      vault kv put $vault_secret_key genesis="@${MOUNT_PATH}/genesis_base64" sudo_details="@${MOUNT_PATH}/sudoKeygenOutput.json"
                  fi
                }
{{- else }}
                safeWriteGenesis() {
                  # Placeholder:
                  # - Implement code to create keys over the cloud-native service or platform different from HashiCorp to store the keys
                  return 0
                }
{{- end }}

          mkdir certcheck
          command={{ $.Values.node.command }}
          echo "Generate genesis"
          GENESIS=$($command build-spec --disable-default-bootnode --chain local)
          GENESIS=$(echo $GENESIS | jq '.name |= {{ .Values.chain | quote }}')
          GENESIS=$(echo $GENESIS | jq '.id |= {{ .Values.chain | replace "-" "_" | quote }}')
          GENESIS=$(echo $GENESIS | jq '.chainType |= "Live"')

          echo "Editing genesis config"
          GENESIS=$(echo $GENESIS | jq '.genesis.runtime.aura.authorities |= []')
          GENESIS=$(echo $GENESIS | jq '.genesis.runtime.grandpa.authorities |= []')
          GENESIS=$(echo $GENESIS | jq '.genesis.runtime.balances.balances |= []')
          {{- if eq $.Values.node.image "ghcr.io/inteli-poc/dscp-node" }}
            GENESIS=$(echo $GENESIS | jq '.genesis.runtime.nodeAuthorization.nodes |= []')
            GENESIS=$(echo $GENESIS | jq '.genesis.runtime.membership.members |= []')
          {{- end }}

          echo "Generating sudo key with scheme Sr25519..."          
          $command key generate --scheme Sr25519 --output-type json >> certcheck/sudoKeygenOutput.json
          SUDO_SEED=$(jq -r '.secretPhrase' certcheck/sudoKeygenOutput.json)
          SUDO_ADDR=$(jq -r '.ss58Address' certcheck/sudoKeygenOutput.json)
          
          echo "Adding sudo account key and balance into genesis"
          GENESIS=$(echo $GENESIS | jq --arg sudo $SUDO_ADDR --arg balance 1152921504606846976 '.genesis.runtime.balances.balances += [[$sudo, ($balance | tonumber)]]')
          GENESIS=$(echo $GENESIS | jq --arg sudo $SUDO_ADDR '.genesis.runtime.sudo.key |= $sudo')
          
          echo "Inserting keys into genesis"

          for ((i=1; i<={{ $.Values.node.validatorCount }}; i++))
          do
            secret_data=$(kubectl get secret "substrate-node-validator-${i}-keys" --namespace {{ .Release.Namespace }} -o json | jq -r '.data["substrate-node-keys"]' | base64 -d)
            
            # Check if secret_data is empty or not
              if [ -n "$secret_data" ]; then
                  echo "Parse aura_addr from decoded JSON"
                  # Extract aura_addr and grandpa_addr
                  aura_addr=$(echo "$secret_data" | jq -r '.data.aura_addr')
                  grandpa_addr=$(echo "$secret_data" | jq -r '.data.grandpa_addr')

                  # Check if extraction successful
                  if [ -n "$aura_addr" ] && [ -n "$grandpa_addr" ]; then
                      # Insert aura_addr keys into GENESIS JSON
                      GENESIS=$(echo "$GENESIS" | jq --arg aura "$aura_addr" '.genesis.runtime.aura.authorities += [$aura]')
                      GENESIS=$(echo "$GENESIS" | jq --arg grandpa "$grandpa_addr" '.genesis.runtime.grandpa.authorities += [[$grandpa, 1]]')
                  else
                      echo "Error: Unable to retrieve aura_addr or grandpa_addr key"
                  fi
              else
                  echo "Error: Unable to retrieve data."
              fi
          done
          
          {{- if eq $.Values.node.image "ghcr.io/inteli-poc/dscp-node" }}
          echo "Adding member accounts and their balances to genesis"
          {{- range $idx, $member := .Values.members }}
            GENESIS=$(echo $GENESIS | jq --arg account_id {{ $member.account_id }} --arg balance {{ $member.balance }} '.genesis.runtime.balances.balances += [[$account_id, ($balance | tonumber)]]')
            GENESIS=$(echo $GENESIS | jq --arg account_id {{ $member.account_id }} '.genesis.runtime.membership.members += [$account_id]')

          {{- range $member.nodes }}
            this_node_id={{ . }}
            arr_node_id=($(echo $this_node_id | fold -w2))
            GENESIS=$(echo $GENESIS | jq --arg owner {{ $member.account_id }} '.genesis.runtime.nodeAuthorization.nodes += [[[], $owner]]')
          for byte in "${arr_node_id[@]}"
          do
            GENESIS=$(echo $GENESIS | jq --arg byte $(echo "obase=10; ibase=16; $byte" | bc) '.genesis.runtime.nodeAuthorization.nodes[-1][0] += [($byte | tonumber)]')
          done
          {{- end }}
          {{- end }}          
          {{- end }}
          
          echo "$GENESIS" > certcheck/genesis.json
          echo "********* check genesis *********"
          # cat certcheck/genesis.json
          echo "Converting genesis to raw format"
          GENESIS=$($command build-spec --disable-default-bootnode --raw --chain certcheck/genesis.json)
          echo "$GENESIS" > certcheck/genesis_raw.json
          cat certcheck/genesis_raw.json | base64 -w0 > certcheck/genesis_base64

          if ! kubectl get configmap "substrate-genesis" --namespace {{ .Release.Namespace }} &> /dev/null; then
            kubectl create configmap "substrate-genesis" --namespace {{ .Release.Namespace }} --from-file=genesis="${MOUNT_PATH}/genesis_base64" --from-file=sudoKeygenOutput="${MOUNT_PATH}/sudoKeygenOutput.json"
          fi

          {{- if and (ne .Values.global.cluster.provider "minikube") (.Values.global.cluster.cloudNativeServices) }}
            # If using any cloud-native service or platform different from HashiCorp to store the keys
          {{- else }}
            safeWriteGenesis
          {{- end }}
      volumes:
        - name: certcheck
          emptyDir:
            medium: Memory
        - name: package-manager
          configMap:
            name: package-manager
{{- if eq .Values.global.vault.type "hashicorp" }}
        - name: scripts-volume
          configMap:
            name: bevel-vault-script
            defaultMode: 0777
{{- end }}
