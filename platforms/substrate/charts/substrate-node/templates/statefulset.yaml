{{ $fullname :=  include "node.fullname" . }}
{{ $selectorLabels :=  include "node.selectorLabels" . }}
{{ $serviceLabels :=  include "node.serviceLabels" .  }}
{{ $serviceAccountName :=  include "node.serviceAccountName" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}  
  labels:
    {{- include "node.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
  {{- $selectorLabels | nindent 6 }}
  podManagementPolicy: {{ default "OrderedReady" .Values.node.podManagementPolicy }}
  replicas: {{ .Values.node.replicas | int }}
  serviceName: {{ $fullname }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
      {{- include "node.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Values.node.chain }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
          - |-
            #!/bin/sh
              . /scripts/package-manager.sh
              packages_to_install="jq curl"
              install_packages "$packages_to_install"

              echo ">>> 1 <<<"

              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl
              mv kubectl /usr/local/bin/
              kubectl version --client

              echo ">>> 2 <<<"

              chain_spec=$(kubectl get configmap "substrate-genesis" --namespace {{ .Release.Namespace }} -o json | jq -r '.data["genesis"]')
              echo "${chain_spec}" | base64 -d > {{ .Values.node.customChainspecPath }}
              
              echo ">>> 3 <<<"

              aura_secretPhrase=$(kubectl get secret "substrate-node-{{ .Release.Name }}-keys" --namespace gensub -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.aura_file_b64' | base64 -d | jq -r '.secretPhrase')
              echo "aura_secretPhrase: $aura_secretPhrase"
              gran_secretPhrase=$(kubectl get secret "substrate-node-{{ .Release.Name }}-keys" --namespace gensub -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.grandpa_file_b64' | base64 -d | jq -r '.secretPhrase')
              echo "gran_secretPhrase: $gran_secretPhrase"
              node_key=$(kubectl get secret "substrate-node-{{ .Release.Name }}-keys" --namespace gensub -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.node_key')
              echo "node_key: $node_key"
              node_id=$(kubectl get secret "substrate-node-{{ .Release.Name }}-keys" --namespace gensub -o json | jq -r '.data["substrate-node-keys"]' | base64 -d | jq -r '.data.node_id')
              echo "node_id: $node_id"

              echo ">>> 4 <<<"

              ./dscp-node key insert --base-path=/data --chain=/data/chainspec.json --key-type=aura --scheme=Sr25519 --suri="${aura_secretPhrase}" && echo "Inserted key aura into Keystore" || echo "Failed to insert key aura into Keystore."
              ./dscp-node key insert --base-path=/data --chain=/data/chainspec.json --key-type=gran --scheme=Ed25519 --suri="${gran_secretPhrase}" && echo "Inserted key gran into Keystore" || echo "Failed to insert key gran into Keystore."

              echo ">>> 5 <<<"

              EXTERNAL_ADDRESS=${POD_NAME}.sub.blockchaincloudpoc-develop.com
              echo "EXTERNAL_ADDRESS=${EXTERNAL_ADDRESS}"
              EXTERNAL_P2P_PORT={{ $.Values.proxy.p2p }}
              echo "EXTERNAL_P2P_PORT=${EXTERNAL_P2P_PORT}"
              RELAY_CHAIN_P2P_PORT={{ $.Values.proxy.p2p }} # 15034
              echo "RELAY_CHAIN_P2P_PORT=${RELAY_CHAIN_P2P_PORT}"

              echo ">>> 6 <<<"

              echo "POD_NAME=${POD_NAME}"

              sleep 30m
              echo "------------------ SLEEP DONE ------------------"

              exec ./dscp-node \
              --name=${POD_NAME} \
              --base-path=/data/ \
              --chain=/data/chainspec.json \
              --node-key ${node_key} \
              --validator \
              --bootnodes '/dns4/validator-1-substrate-node-0.sub.blockchaincloudpoc-develop.com/tcp/15050/p2p/12D3KooWDYCsJgrQXuAQEFR9ijda3apdjcSLBPN3RfzbZRRA2fJP' \
              --rpc-external --ws-external --rpc-methods=Unsafe --rpc-cors=all --unsafe-ws-external --unsafe-rpc-external \
              --public-addr=/dns4/${EXTERNAL_ADDRESS}/tcp/${EXTERNAL_P2P_PORT} \
              --listen-addr=/ip4/0.0.0.0/tcp/${RELAY_CHAIN_P2P_PORT}
          env:
            - name: CHAIN
              value: {{ .Values.node.chain }}
            - name: NODE_NAME
              value: "$(POD_NAME)"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: admin
              containerPort: 14271
              protocol: TCP
            - containerPort: 9933
              name: http-rpc
              protocol: TCP
            - containerPort: 9944
              name: websocket-rpc
              protocol: TCP
            - containerPort: 9615
              name: prometheus
              protocol: TCP
            - containerPort: 30333
              name: p2p
              protocol: TCP
            - containerPort: 8080 # 30334
              name: pc-p2p
              protocol: TCP
          {{- if .Values.node.enableStartupProbe }}
          # On startup, retry the connection to the /health endpoint every 10s for 5 min before killing the container
          startupProbe:
            failureThreshold: 30
            periodSeconds: 10
            httpGet:
              path: /health
              port: http-rpc
          {{- end }}
          resources:
          {{- toYaml .Values.node.resources | nindent 12 }}
          volumeMounts:
          - mountPath: /secrets
            name: keystore
          - mountPath: /data
            name: chain-data
          - name: package-manager
            mountPath: /scripts/package-manager.sh
            subPath: package-manager.sh
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: admin
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: admin
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end}}
      serviceAccountName: {{ $serviceAccountName }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.node.persistGeneratedNodeKey }}
      {{- else if .Values.node.customNodeKey }}
        - name: custom-node-key
          secret:
            secretName: {{ $fullname }}-custom-node-key
      {{- end }}
      {{- range $keys := .Values.node.keys }}
        - name: {{ .type }}
          secret:
            secretName: {{ $fullname }}-{{ .type }}
            defaultMode: 0400
      {{- end }}
        - name: keystore
          emptyDir:
            medium: Memory
        - name: package-manager
          configMap:
            name: package-manager
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: chain-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.node.chainDataKubernetesVolumeSnapshot }}
        dataSource:
          name: {{ .Values.node.chainDataKubernetesVolumeSnapshot }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
        storageClassName: storage-{{ .Release.Name }} # {{ .Values.storageClass }}
        resources:
          requests:
            storage: {{ .Values.node.dataVolumeSize }}
