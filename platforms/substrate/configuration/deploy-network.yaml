##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

##############################################################################################
# This playbook deploys a DLT network on existing Kubernetes clusters
# The Kubernetes clusters should already be created and the infomation to connect to the
#  clusters be updated in the network.yaml file that is used as an input to this playbook
##############################################################################################

##############################################################################################
# To Run this playbook from this directory, use the following command (network.yaml also in this directory)
#  ansible-playbook deploy-network.yaml -e "@./network.yaml"
##############################################################################################


# Please ensure that the ../../shared/configuration playbooks have been run using the same network.yaml
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:      
  # Delete build directory 
  - name: Remove build directory
    file:
      path: "./build"
      state: absent

  # Create namespace
  - name: "Create namespace"
    include_role: 
      name: create/namespace
    vars:
      component_ns: "{{ item.name | lower }}-subs"
      organisation: "{{ item.name | lower }}"
      kubernetes: "{{ item.k8s }}"
      gitops: "{{ item.gitops }}"
    loop: "{{ network['organizations'] }}"

  # Create Storageclass
  - name: Create Storage Class
    include_role:
      name: "{{ playbook_dir }}/../../../platforms/shared/configuration/roles/setup/storageclass"
    vars:
      sc_name: "{{ org.name | lower }}-bevel-storageclass"
      region: "{{ org.k8s.region | default('eu-west-1') }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
        loop_var: org

  # Setup script for Vault and OS Package Manager
  - name: "Setup script for Vault and OS Package Manager"
    include_role:
      name: "{{ playbook_dir }}/../../shared/configuration/roles/setup/scripts"
    vars:
      namespace: "{{ org.name | lower }}-subs"
      kubernetes: "{{ org.k8s }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Setup Vault-Kubernetes accesses and Regcred for docker registry
  - name: "Setup vault"   
    include_role: 
      name: "{{ playbook_dir }}/../../shared/configuration/roles/setup/vault_kubernetes"
    vars:
      name: "{{ org.name | lower }}"
      component_ns: "{{ org.name | lower }}-subs"
      component_name: "{{ org.name | lower }}-vaultk8s-job"
      component_auth: "{{ network.env.type }}{{ name }}"
      component_type: "organization"
      kubernetes: "{{ org.k8s }}"
      vault: "{{ org.vault }}"
      gitops: "{{ org.gitops }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Generate Ambassador certificate for nodes # NoGen
  # create secret in vault:
  # at path: default('secretsv2') }}/{{ organisation }}/tlscerts 
  # 1. tlscacerts
  # 2. tlskey
  # 
  # create k8s secret in k8s-cluster:
  # secret name: {{ component_name }}-ambassador-certs
  # 1. cert
  # 2. key
  - name: "Create ambassador certificates for Nodes" 
    include_role: 
      name: create/certificates/ambassador
    vars:
      root_subject: "{{ network.config.subject }}"
      cert_subject: "{{ network.config.subject | regex_replace(',', '/') }}"
      services: "{{ item.services }}"
      organisation: "{{ item.name | lower }}"
      component_ns: "{{ item.name | lower }}-subs"
      component_name: "{{ item.name | lower }}"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
    loop: "{{ network['organizations']}}"
    when: network.env.proxy == "ambassador"

  # Generate the key materials and stores them in vault # Gen - substrate-key-mgmt
  # at path: ${VAULT_ADDR}/v1/${CERTS_SECRET_PREFIX}/${PEER_NAME}/substrate
  # \"node_id\": \"$node_id\",
  # \"node_key\": \"$(cat node_key)\",
  # \"aura_seed\": \"$AURA_SEED\",
  # \"aura_addr\": \"$AURA_ADDR\",
  # \"grandpa_seed\": \"$GRANDPA_SEED\",
  # \"grandpa_addr\": \"$GRANDPA_ADDR\",
  # \"account_seed\": \"$ACCOUNT_SEED\",  if <.Values.node.type "member">
  # \"account_addr\": \"$ACCOUNT_ADDR\",  if <.Values.node.type "member">
  # \"account_file_b64\": \"$(cat accKeygenOutput.json | base64 -w 0)\",
  # \"aura_file_b64\": \"$(cat auraKeygenOutput.json | base64 -w 0)\",
  # \"grandpa_file_b64\":\"$(cat grandpaKeygenOutput.json | base64 -w 0)\"
  - name: "Generate key materials for Nodes"
    include_role:
      name: create/keys # substrate-key-mgmt
    vars:
      name: "{{ item.name | lower }}"        
      component_name: "{{ item.name | lower }}"
      component_ns: "{{ item.name | lower }}-subs"
      vault: "{{ item.vault }}"
      peers: "{{ item.services.peers }}"
      charts_dir: "{{ item.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      org: "{{ item }}"
      gitops: "{{ item.gitops }}"
      kubernetes: "{{ item.k8s }}"
    loop: "{{ network['organizations'] }}"

  # Generate the genesis.json for all orgs of the network # Gen
  # vault kv put ${CERTS_SECRET_PREFIX}/genesis genesis="@${MOUNT_PATH}/genesis_base64" sudo_details="@${MOUNT_PATH}/sudoKeygenOutput.json"
  - name: "Generate genesis for the network"
    include_role:
      name: create/genesis
    vars:
      build_path: "./build"
      sudo_org_query: "organizations[?type=='superuser']"
      org: "{{ network | json_query(sudo_org_query) | first }}"

  # Deploy Substrate bootnodes # Gen
  - name: "Deploy Bootnodes"
    include_role:
      name: create/bootnode
    vars:
      build_path: "./build"
      kubernetes: "{{ item.k8s }}"
      component_ns: "{{ item.name | lower }}-subs"
      name: "{{ item.name | lower }}"
      peers: "{{ item.services.peers }}"
    loop: "{{ network['organizations'] }}"

  # Generate the bootnode list file # NoGen
  - name: "Generate bootnode file list for the network"
    include_role:
      name: create/bootnodefile

  # Deploy Substrate validator nodes # Gen
  - name: "Deploy Substrate validators"
    include_role:
      name: create/validator_node
    vars:
      build_path: "./build"
      kubernetes: "{{ item.k8s }}"
      component_ns: "{{ item.name | lower }}-subs"
      name: "{{ item.name | lower }}"
      peers: "{{ item.services.peers }}"
    loop: "{{ network['organizations'] }}"

  # Deploy ipfs bootnodes  # Gen
  - name: "Deploy ipfs bootnodes"
    include_role: 
      name: create/ipfs_bootnode
    vars:
      build_path: "./build"
      charts_dir: "{{ item.gitops.chart_source }}"
      values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
      org: "{{ item }}"
      vault: "{{ item.vault }}"
      peers: "{{ item.services.peers }}"
      gitops: "{{ item.gitops }}"
      component_name: "{{ item.name | lower }}"
      component_ns: "{{ item.name | lower }}-subs"
      name: "{{ item.name | lower }}"
    loop: "{{ network['organizations'] }}"
    when: network.config.node_image == "inteli-poc/dscp-node"

  # Generate the ipfsbootnode list file   # NoGen
  - name: "Generate ipfsbootnode file list for the network"
    include_role:
      name: create/ipfsbootnodefile
    when: network.config.node_image == "inteli-poc/dscp-node"

  # Deploy Substrate member nodes
  - name: "Deploy Substrate members"
    include_role:
      name: create/member_node
    vars:
      build_path: "./build"
      kubernetes: "{{ item.k8s }}"
      vault: "{{ item.vault }}"
      component_ns: "{{ item.name | lower }}-subs"
      name: "{{ item.name | lower }}"
      peers: "{{ item.services.peers }}"
    loop: "{{ network['organizations'] }}"

  # These variables can be overriden from the command line
  vars:
    install_os: "linux"           # Default to linux OS
    install_arch:  "amd64"        # Default to amd64 architecture
    bin_install_dir:  "~/bin"     # Default to /bin install directory for binaries
    add_new_org: false            # 'add_new_org' flag, defaults to false when not defined.
