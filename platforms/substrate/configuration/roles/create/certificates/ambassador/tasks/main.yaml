##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

##############################################################################################
# This role generates certificates for ambassador
# and places them in vault. Certificates are created using openssl
# This also creates the Kubernetes secrets
##############################################################################################

---
# Check if Ambassador TLS directory exists
- name: "check if dir exists or not"
  stat:
    path: "{{ ambassadortls }}"
  register: ambassadortlsdir_check

# Ensure Ambassador TLS directory exists
- name: Ensure ambassador tls dir exists
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ ambassadortls }}"
  when: not ambassadortlsdir_check.stat.exists

# Check if Ambassador credentials secret already exists
- name: Check Ambassador cred exists
  k8s_info:
    kind: Secret
    namespace: "{{ component_ns }}"
    name: "{{ component_name }}-ambassador-certs"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_ambassador_secret

# Check OpenSSL configuration file exists for Ambassador TLS if Ambassador secret does not exist
- name: "check if openssl conf file exists or not"
  stat:
    path: "./build/openssl{{ component_name }}.conf"
  register: openssl_conf_check
  when: get_ambassador_secret.resources|length == 0

# Generate OpenSSL configuration file for domain if Ambassador secret does not exist
- name: Generate OpenSSL conf file
  shell: |
    cd ./build
    cat <<EOF >openssl{{ component_name }}.conf
    [dn]
    CN={{ domain_name }}
    [req]
    distinguished_name = dn
    [EXT]
    keyUsage=digitalSignature
    extendedKeyUsage=serverAuth
    subjectAltName = @alt_names

    [alt_names]
    DNS.1 = {{ domain_name }}
    DNS.2 = {{ domain_name_api }}
    DNS.3 = {{ domain_name_web }}
    EOF
  vars:
    domain_name: "{{ component_name }}.{{ item.external_url_suffix }}"
    domain_name_api: "{{ component_name }}api.{{ item.external_url_suffix }}"
    domain_name_web: "{{ component_name }}web.{{ item.external_url_suffix }}"   
  when: get_ambassador_secret.resources|length == 0

# Generate Ambassador TLS certificates if Ambassador secret does not exist
- name: Generate Ambassador TLS certs
  shell: |
    openssl req -x509 -out {{ ambassadortls }}/ambassador.crt -keyout {{ ambassadortls }}/ambassador.key -newkey rsa:2048 -nodes -sha256 -subj "/CN={{ domain_name }}" -extensions EXT -config "{{playbook_dir}}/build/openssl{{ component_name }}.conf" 
  vars:
    domain_name: "{{ component_name }}.{{ item.external_url_suffix }}"
  when: get_ambassador_secret.resources|length == 0

# Store the generated Ambassador TLS certificates in Vault if Ambassador secret does not exist
- name: Putting TLS certs to vault
  shell: |
    vault kv put {{ vault.secret_path | default('secretsv2') }}/{{ network.env.type }}{{ organisation }}/tlscerts tlscacerts="$(cat {{ ambassadortls }}/ambassador.crt | base64)" tlskey="$(cat {{ ambassadortls }}/ambassador.key | base64)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  when: get_ambassador_secret.resources|length == 0

# Create the Ambassador credentials secret if it does not exist
- name: Create the Ambassador credentials
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl create secret tls {{ component_name }}-ambassador-certs --cert={{ ambassadortls }}/ambassador.crt --key={{ ambassadortls }}/ambassador.key -n {{ component_ns }}
  when: get_ambassador_secret.resources|length == 0

# Copy generated Ambassador TLS certificate to specified build location if defined
- name: Copy generated ambassador tls certs to given build location
  copy:
    src: "{{ ambassadortls }}/ambassador.crt"
    dest: "{{ cert_file }}"
    follow: yes
  when: cert_file is defined
